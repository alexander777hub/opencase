<?php

namespace app\modules\mng\models;

use alexander777hub\crop\models\PhotoEntity;
use app\models\Item;
use app\models\User;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "opening".
 *
 * @property int      $id
 * @property string   $name
 * @property int|null $avatar_id
 * @property int|null $user_id
 * @property User[]   $users
 * @property float    $price
 * @property Item[]   $items
 * @property int|null $category_id
 * @property OpeningCategory|null $openingCategory
 */
class Opening extends \yii\db\ActiveRecord

{
    public function beforeDelete()
    {
        $q = 'DELETE FROM `opening_user` WHERE
                    `opening_user`.`case_id` = ' .(int) $this->id . '
                     ';
        \Yii::$app->db->createCommand($q)->execute();
        $q = 'DELETE FROM `opening_item` WHERE
                    `opening_item`.`case_id` = ' .(int) $this->id . '
                     ';
        \Yii::$app->db->createCommand($q)->execute();
        /*$q = 'INSERT IGNORE INTO item SET profile_id = NULL WHERE
                    `item`.`case_id` = ' .(int) $this->id . ' 
                   '; */

        return parent::beforeDelete();

        // TODO: Change the autogenerated stub

    }

    public $photo;

    public  $item_ids;

    public $user_ids;

    public $category = null;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'opening';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'price', 'item_ids'], 'required'],

            [['avatar_id', 'user_id', 'category_id'], 'integer'],
            [['name'], 'string', 'max' => 20],
          //  [['price'], 'validatePrice'],
            [['item_ids'], 'validateCase'],
            [['user_ids'], 'safe'],
          //  [['price'], 'number', 'numberPattern' => '/^\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\s*$/',  'min' => 25.00, 'max' => 999999999.9999],
           [['price'], 'number', 'numberPattern' => '/^[1-9][-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\s*$/',  'min' => 25.00, 'max' => 999999999.9999],
        ];
    }


    public function validateCase()
    {
        if(count($this->item_ids) < 10 || count($this->item_ids) > 500){
            $error = "Количество предметов при открытии должно быть от 10 до 500";
            $this->addError('item_ids', $error);
        }
        /*foreach($this->item_ids as $k=>$val){
            $rows = (new \yii\db\Query())
                ->select(['case_id', 'item_id', 'user_id'])
                ->from('opening_item')
                ->where(['user_id' => $this->user_id])
                ->andWhere(['item_id' => intval($val)])
                ->all();
            if($rows){
                $name = Item::findOne(intval($val))->getAttribute('internal_name');
                $error = $name . ':  такой кейс уже существует';
                $this->addError('item_ids', $error );
                \Yii::$app->getSession()->setFlash('danger', $error);
                return;
            }
        } */


    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'avatar_id' => 'Avatar ID',
            'user_id' => 'Пользователь',
            'item_ids' => 'Предметы'
        ];
    }

    public function getUsers()
    {
        return $this->hasMany(User::className(), ['id' => 'user_id'])
            ->viaTable('opening_user', ['case_id' => 'id']);
    }

    public function getItems()
    {
        return $this->hasMany(Item::className(), ['id' => 'item_id'])
            ->viaTable('opening_item', ['case_id' => 'id']);
    }



    public static function getAvatarUrl($id)
    {
        $photo = PhotoEntity::findOne($id);
        // return a default image placeholder if your source profile_pic is not found
        return $photo && $photo->url ? $photo->url : "/uploads/profile/default.png";
    }

    public static function getOriginal($id)
    {
        if(!$id){
            return 'Не задано';
        }
        $photo = self::getAvatarUrl($id);

        $photo = str_replace('public', 'original', $photo);
        return $photo;

    }

    /**
     * Gets query for [[Photos]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPhotos()
    {
        return $this->hasMany(PhotoEntity::className(), ['bind_obj_id' => 'id']);
    }

    public static function getCaseName ($id)
    {
       $name = self::find()->where(['id' => $id]) ? self::find()->where(['id' => $id])->one()->name : null;
       return $name;

    }

    public function setItems()
    {
        if(!empty($this->items)){
            foreach($this->items as $k => $val){
                $this->item_ids[] = $val['id'];
            }
        }
    }

    public function setUsers()
    {
        if(!empty($this->users)){
            foreach($this->users as $k => $val){
                $this->user_ids[] = intval($val['id']);
            }
        }
    }

    public function addItem($id)
    {
        if (!$id) {
            return false;
        }



        $row = (new \yii\db\Query())
            ->select(['case_id', 'item_id'])
            ->from('opening_item')
            ->where(['item_id' =>(int)$id ])
            ->andWhere(['case_id' =>(int)$this->id ])
            ->one();
        if(!$row){
            $q = 'INSERT IGNORE INTO opening_item SET case_id = ' . (int)$this->id . ',
                    item_id=' . (int)$id . ', price=' . (int)$this->price . ', user_id=' . $this->user_id . ' ';


            Yii::$app->db->createCommand($q)->execute();
            return true;
        }
        return false;

    }

    public function getOpeningCategory()
    {
        return $this->hasOne(OpeningCategory::class, ['id' => 'category_id']);
    }

    public function save($runValidation = true, $attributeNames = null)
    {

        if (empty($this->item_ids)) {
            if(!empty($this->items)){
                foreach($this->items as $k => $item){
                    $q = 'DELETE FROM `opening_item` WHERE
                    `opening_item`.`case_id` = ' .intval($this->id ). ' AND   `opening_item`.`item_id` = ' . intval($item['id'] ). '
                     ';
                    \Yii::$app->db->createCommand($q)->execute();
                }

            }

        }
        if (empty($this->user_ids)) {
            if(!empty($this->users)){
                foreach($this->users as $k => $user){
                    $q = 'DELETE FROM `opening_user` WHERE
                    `opening_user`.`case_id` = ' .intval($this->id ). ' AND   `opening_user`.`user_id` = ' . intval($user['id'] ). '
                     ';
                    \Yii::$app->db->createCommand($q)->execute();
                }

            }

        }

        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function addUser($id)
    {
        if (!$id) {
            return false;
        }

        $row = (new \yii\db\Query())
            ->select(['case_id', 'user_id'])
            ->from('opening_user')
            ->where(['user_id' =>(int)$id ])
            ->andWhere(['case_id' =>(int)$this->id ])
            ->one();
        if(!$row){
            $q = 'INSERT IGNORE INTO opening_user SET case_id = ' . intval($this->id) . ',
                     user_id=' . intval($id) . ' ';


            Yii::$app->db->createCommand($q)->execute();
            return true;
        }
        return false;

    }



    public function afterSave($insert, $changedAttributes)
    {

        if (!empty($this->item_ids)) {
            foreach ($this->item_ids as $k => $val) {
                $this->addItem(intval($val));
            }
        }

        if (!empty($this->user_ids)) {
                foreach ($this->user_ids as $k => $val) {
                    $this->addUser(intval($val));
                }


        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
