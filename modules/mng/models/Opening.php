<?php

namespace app\modules\mng\models;

use alexander777hub\crop\models\PhotoEntity;
use app\models\Item;
use app\models\User;
use Yii;

/**
 * This is the model class for table "opening".
 *
 * @property int      $id
 * @property string   $name
 * @property int|null $avatar_id
 * @property int|null $user_id
 * @property User[]   $users
 * @property float    $price
 * @property Item[]   $items
 */
class Opening extends \yii\db\ActiveRecord

{



    public function beforeDelete()
    {
        $q = 'DELETE FROM `opening_user` WHERE
                    `opening_user`.`case_id` = ' .(int) $this->id . '
                     ';
        \Yii::$app->db->createCommand($q)->execute();
        $q = 'DELETE FROM `opening_item` WHERE
                    `opening_item`.`case_id` = ' .(int) $this->id . '
                     ';
        \Yii::$app->db->createCommand($q)->execute();
        /*$q = 'INSERT IGNORE INTO item SET profile_id = NULL WHERE
                    `item`.`case_id` = ' .(int) $this->id . ' 
                   '; */

        return parent::beforeDelete();

        // TODO: Change the autogenerated stub

    }

    public $photo;

    public $item_id;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'opening';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['avatar_id', 'user_id', 'item_id'], 'integer'],
            [['name'], 'string', 'max' => 20],
            [['item_id'], 'validateCase'],
            [['price'], 'number', 'numberPattern' => '/^\s*[-+]?[0-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\s*$/',],
        ];
    }

    public function validateCase()
    {
        if($this->item_id === 'Не выбран'){
            return;
        }
        $rows = (new \yii\db\Query())
            ->select('case_id', 'item_id', 'user_id')
            ->from('opening_item')
            ->where(['case_id' => $this->id])
            ->andWhere(['item_id' => $this->item_id])
            ->all();
        if($rows){
            $this->addError('id', 'Такой кейс уже существует');
            \Yii::$app->getSession()->setFlash('danger', 'Такой кейс уже существует' );
            return;
        }

    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'avatar_id' => 'Avatar ID',
            'user_id' => 'User ID',
        ];
    }

    public function getUsers()
    {
        return $this->hasMany(User::className(), ['id' => 'user_id'])
            ->viaTable('opening_user', ['case_id' => 'id']);
    }

    public function getItems()
    {
        return $this->hasMany(Item::className(), ['id' => 'item_id'])
            ->viaTable('opening_item', ['case_id' => 'id']);
    }



    public static function getAvatarUrl($id)
    {
        $photo = PhotoEntity::findOne($id);
        // return a default image placeholder if your source profile_pic is not found
        return $photo && $photo->url ? $photo->url : "/uploads/profile/default.png";
    }

    /**
     * Gets query for [[Photos]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPhotos()
    {
        return $this->hasMany(PhotoEntity::className(), ['bind_obj_id' => 'id']);
    }

    public function addUser()
    {
        if(!$this->user_id){
            return false;
        }
        $user = User::findOne($this->user_id);
        $this->link('users', $user);
        return true;

    }

    public static function getCaseName ($id)
    {
       $name = self::find()->where(['id' => $id]) ? self::find()->where(['id' => $id])->one()->name : null;
       return $name;

    }

    public function addItem()
    {
        if(!$this->item_id || !$this->user_id){
            return false;
        }

        $item = Item::findOne($this->item_id);
      //  $this->link('items', $item);
        $q = 'INSERT IGNORE INTO opening_item SET case_id = ' .(int) $this->id . ',
                    item_id=' .(int) $this->item_id . ', user_id=' .(int) $this->user_id . ', price=' .(int) $this->price . ' ';


        Yii::$app->db->createCommand($q)->execute();
        return true;

    }

}
