<?php

namespace app\models;

use alexander777hub\crop\models\PhotoEntity;
use app\modules\mng\models\ItemPhotoEntity;
use app\modules\mng\models\Opening;
use app\modules\mng\models\OpeningItemInit;
use Yii;

/**
 * This is the model class for table "item".
 *
 * @property int $id
 * @property int $appid
 * @property int|null $classid
 * @property int|null $instanceid
 * @property int $currency
 *  @property string|null  $background_color
 *   @property string|null   $icon_url
 * @property string|null $icon_url_large
 * @property string|null $exterior
 * @property string|null $internal_name
 * @property string|null $type
 * @property string|null $name
 * @property string|null $market_hash_name
 * @property string|null $rarity
 * @property string|null $steam_id
 * @property Opening[] $openings
 *  @property OpeningItemInit[] $initOpenings
 * @property float|null $price
 * @property int|null $is_gold
 */
class Item extends \yii\db\ActiveRecord
{
    public function beforeDelete()
    {
        $q = 'DELETE FROM `opening_item` WHERE
                    `opening_item`.`item_id` = ' .(int) $this->id . '
                     ';
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public static function getFullList()
    {
        $arr = \yii\helpers\ArrayHelper::map(\app\models\Item::find()->all(), 'id', 'market_hash_name');
        $arr[0] = 'Не выбран';
        ksort($arr);
        return $arr;
    }
    public static function getFullListSelect2()
    {
        $items = \app\models\Item::find()->all();
        foreach($items as $k=>$val){
            if(!$val->price){
                unset($items[$k]);
            }
        }
        $arr = \yii\helpers\ArrayHelper::map($items, 'id', 'internal_name');
        return $arr;
    }


    public $photo;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'item';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['appid'],  'integer'],
            [[ 'instanceid', 'currency', 'classid', 'steam_id'],  'string', 'max' => 255],
            [['icon_url'],'string'],
            [['background_color', 'icon_url_large', 'rarity', 'type', 'exterior', 'name', 'photo', 'internal_name','market_hash_name'], 'string', 'max' => 255],
            [['price'], 'number', 'numberPattern' => '/^[0-9][-+]?[1-9]*[.,]?[0-9]+([eE][-+]?[0-9]+)?\s*$/',  'min' => 0.01, 'max' => 999999999.9999],
        ];
    }


    /**
     * Gets query for [[Photos]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPhotos()
    {
        return $this->hasMany(ItemPhotoEntity::className(), ['bind_obj_id' => 'id']);
    }

    public function getOpenings() {
        return $this->hasMany(Opening::className(), ['id' => 'case_id'])
            ->viaTable('opening_item', ['item_id' => 'id']);
    }

    public function getInitOpenings() {
        return $this->hasMany(Opening::className(), ['id' => 'case_id'])
            ->viaTable('opening_item_init', ['item_id' => 'id']);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'appid' => 'App ID',
            'class_id' => 'Class ID',
            'currency' => 'Currency',
            'icon' => 'Icon',
            'icon_large' => 'Icon Large',
            'price' => 'Price'
        ];
    }

    public static function getOriginal($icon)
    {
        if(!$icon){
            return false;

        }
        $original =  str_replace('public', 'original', $icon);
        return $original;
    }

    public function getWinner($chance)
    {
        $list = [
            ['name' => 'unsuccess',
                'chance' => 100 - $chance,
            ],
            ['name' => 'success',
                'chance' => $chance,
            ]
        ];

        $items = [];
        $i = 0;
        $maxTickets = 0;

        foreach ($list as $item) {
            if ($item['chance'] === 0) continue;

            if ($i == 0) {
                $from = 1;
            } else {
                $from = $items[$i - 1]['to'];
            }

            $to = $from + $item['chance'];
            $maxTickets = $to;

            $items[$i] = [
                'from' => $from,
                'to' => $to,
                'name' => $item['name']
            ];

            $i++;
        }

        try {
            $winTicket = mt_rand(1, $maxTickets);
        } catch (\Exception $e) {
            return null;
        }

        $winItem = null;

        foreach ($items as $item) {
            if ($item['from'] <= $winTicket && $item['to'] >= $winTicket) {
                $winItem = $item;
                break;
            }
        }
        return $winItem['name'] == 'success' ? 1 : 0;

    }


    public function updatePrice($market_hash_name)
    {
        $client = new \GuzzleHttp\Client([
            'timeout' => 60,
            'debug' => false,
        ]);
        $request = $client->request('GET', 'https://market.csgo.com/api/v2/prices/RUB.json', [

            'timeout' => 300,
        ]);
        //

        $r =  json_decode($request->getBody()->getContents(), true);
        if(isset($r['items']) && !empty($r['items'])) {
            $arr = [];
            foreach ($r['items'] as $k=>$val){
                if(isset($val['market_hash_name']) && $val['market_hash_name'] == $market_hash_name){
                    $arr[] = $val['price'];

                }
            }

            if(!empty($arr)){
                ksort($arr);
                $i = 0;
                if(!isset($arr[$i])){
                    echo "NO data IN item" . '' . $market_hash_name . '<br>';
                    var_dump($arr);
                    exit;
                }

            } else {
                echo "NO data for item" . '' . $market_hash_name . '<br>';
            }
        }
        $price = $arr[0];
        return $price;
    }

}
